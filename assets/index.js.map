{"version":3,"file":"index.js","sources":["../../vite/modulepreload-polyfill","../../src/utils.ts","../../src/twemoji.svg","../../src/Emoji.tsx","../../src/EmojiPicker/Navbar.tsx","../../src/EmojiPicker/Footer.tsx","../../src/EmojiPicker/Scroll.tsx","../../src/EmojiPicker.tsx","../../website/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export interface EmojiObject {\n  unicode: string;\n  name: string;\n  keywords?: string[];\n}\n\n/**\n * Converts from unified to native representation of an emoji.\n * @param unified unified representation\n */\nexport function unifiedToNative(unified: string) {\n  const codePoints = unified.split('-').map(u => parseInt(u, 16));\n  return String.fromCodePoint.apply(String, codePoints);\n}\n\n/**\n * Measures the pixel width of a scrollbar.\n * source: https://github.com/sonicdoe/measure-scrollbar.\n */\nexport function measureScrollbar(): number {\n  if (typeof document == 'undefined') return 0;\n  const div = document.createElement('div');\n  div.style.cssText = \"width:100px; height:100px; overflow:scroll; position:absolute; top:-9999px\";\n  document.body.appendChild(div);\n  const scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n}\n\n/**\n * Calculates the number of rows when key and array are flattened, along\n * with an array of ranges to map an index back to key.\n * @param data key array mapping\n * @param perRow number of elements to chunk array into\n */\nexport type itemRange = { key: string; from: number; to: number; length: number }\nexport function calcCountAndRange(data: Record<string, any[]>, perRow: number) {\n  let itemCount = 0, itemRanges: itemRange[] = [];\n  Object.entries(data).forEach(([key, array]) => {\n    if (array.length === 0) return;\n    let from = itemCount, to = itemCount + 1 + Math.ceil(array.length / perRow);\n    itemRanges.push({key, from, to, length: array.length});\n    itemCount = to;\n  })\n  return {itemCount, itemRanges};\n}\n\n// Returns true if objects shallowly differ.\nexport function shallowDiffer(prev: Object, next: Object): boolean {\n  for (let attribute in prev) { if (!(attribute in next)) { return true; }}\n  for (let attribute in next) { if (prev[attribute] !== next[attribute]) { return true; }}\n  return false;\n}\n\n// Trailing throttle function.\nexport function throttleIdleTask(callback: Function) {\n  // @ts-ignore\n  const idleHandler = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  let running = false, argsFunc: any;\n  return function throttled(...args: any[]) {\n    argsFunc = args;\n    if (running) { return; }\n    running = true;\n    idleHandler(() => {\n      running = false; \n      callback.apply(null, argsFunc);\n    })\n  }\n}","export default \"__VITE_ASSET__064e717d__\"","import React, { FC } from 'react';\nimport { EmojiObject, unifiedToNative } from './utils'\nimport twemoji from \"./twemoji.svg\"\n\ntype EmojiProps = { \n  emoji: EmojiObject; \n  className?: string;\n  [key: string]: any; \n}\n\nconst Emoji: FC<EmojiProps> = ({emoji, className, ...props}) => {\n  className = className ? `emoji-picker-emoji ${className}` : `emoji-picker-emoji`\n  return (\n    <img \n      className={className} \n      data-unicode={emoji.unicode}\n      alt={unifiedToNative(emoji.unicode)} \n      src={`${twemoji}#${emoji.unicode}`} \n      draggable=\"false\"\n      aria-label={emoji.name} \n      {...props}\n    />\n  )\n}\n\nexport { EmojiProps, Emoji };\nexport default Emoji;\n","import React, { FC, useState, KeyboardEvent, MouseEvent, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nexport type NavbarProps = {\n  data: Record<string, EmojiObject[]>\n  handleSelectInNavbar: Function, \n  [key: string]: any\n}\n\nexport const Navbar: FC<NavbarProps> = memo(({data, handleSelectInNavbar, ...props}) => {\n  \n  // roving tabindex\n  const [index, setIndex] = useState(0);\n  \n  const onNavbarKeyDown = (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'Enter': \n        return handleSelectInNavbar(Object.keys(data)[index]);\n      case 'ArrowLeft':\n        return index > 0 && setIndex(index => index - 1);\n      case 'ArrowRight':\n        return index < Object.keys(data).length - 1 && setIndex(index => index + 1)\n      case 'Home':\n        return index > 0 && setIndex(0);\n      case 'End':\n        return index < Object.keys(data).length - 1 && setIndex(Object.keys(data).length - 1)\n    }\n  }\n\n  const onNavbarClick = (index: number, category: string) => (event: MouseEvent) => {\n    setIndex(index);\n    handleSelectInNavbar(category);\n  }\n\n  return (\n    <div className=\"emoji-picker-navbar\" {...props} role=\"tablist\" aria-label=\"emoji categories\">\n      { Object.entries(data).map(([category, list], i) => {\n          const props = {\n            className: \"emoji-picker-navbar-category\",\n            key: `navbar-${category}`,\n            onClick: onNavbarClick(i, category),\n            onKeyDown: onNavbarKeyDown,\n            role: \"tab\",\n            \"aria-label\": category,\n            \"aria-selected\": false,\n            tabIndex: -1,\n            ...i == index && {\n              \"aria-selected\": true,\n              tabIndex: 0,\n              ref: (button: HTMLButtonElement) => Boolean(document.activeElement?.closest(\".emoji-picker-navbar\")) && button?.focus(),\n            }\n          }\n          return (\n            <button {...props}>\n              { <Emoji emoji={list[0]}/> }\n            </button>\n          )\n        }\n      )}\n    </div>  \n  )\n})","import React, { FC, memo } from \"react\";\nimport Emoji from \"../Emoji\"\nimport { EmojiObject } from \"../utils\"\n\nexport type FooterProps = {\n  emoji: EmojiObject | undefined\n  emojiPreviewName: Function\n  [key: string]: any\n}\n\nexport const Footer: FC<FooterProps> = memo(({emoji, emojiPreviewName, ...props}) => {\n  return (\n    <div className=\"emoji-picker-footer\" {...props}>\n      { <Emoji emoji={emoji || {name: \"wave\", unicode: \"1f44b\"}}/> }\n      <div className=\"emoji-picker-name\">\n        { emoji ? emojiPreviewName(emoji) : <span style={{'fontSize': '1.25em'}}>Emoji Picker</span> }\n      </div>\n    </div>     \n  )\n})","import React, { FC, useEffect, useRef, Ref, useState, memo, forwardRef, MutableRefObject, CSSProperties, MouseEvent, useCallback } from \"react\";\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport { EmojiObject, shallowDiffer, itemRange } from '../utils'\nimport Emoji from \"../Emoji\";\n\ntype ScrollProps = {\n  emojisPerRow: number, \n  emojiSize: number,\n  numberScrollRows: number,\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null,\n  emojiData: Record<string, EmojiObject[]>;\n  refVirtualList: MutableRefObject<VirtualList>,\n  handleClickInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  handleMouseInScroll: (emoji: EmojiObject, row: number) => ((event: MouseEvent<HTMLLIElement>) => void) | undefined,\n  itemCount: number,\n  itemRanges: itemRange[],\n  collapseHeightOnSearch: boolean,\n}\n\nconst Scroll: FC<ScrollProps> = ({emojisPerRow, emojiSize, numberScrollRows, focusedEmoji, emojiData, refVirtualList, handleClickInScroll, handleMouseInScroll, itemCount, itemRanges, collapseHeightOnSearch}) => {\n  \n  const [arrayOfRows, setArrayOfRows] = useState<Record<number, JSX.Element>>({});\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n\n  // Keep track of previously focused emoji to avoid re-rendering all rows.\n  const prevFocusedEmoji = useRef<{emoji: EmojiObject, row: number} | null>(null);\n\n  // Reset arrayOfRows upon change in data or emojisPerRow.\n  useEffect(function resetScrollState() { \n    setArrayOfRows({}); \n    infiniteLoaderRef?.current.resetloadMoreItemsCache();\n    prevFocusedEmoji.current = focusedEmoji; // focusedEmoji included in emojiData change render\n    refVirtualList?.current.scrollToItem(0);\n    loadMoreItems(0, Math.min(numberScrollRows + 10 - 1, itemRanges[itemRanges.length - 1].to));  // minimumBatchSize + threshold - 1\n  }, [emojiData, emojisPerRow]);\n\n  // Recompute the rows of the next and previous focusedEmoji upon change in focusedEmoji.\n  useEffect(function resetRowsWithFocusedEmoji() {\n    let prevEmoji = prevFocusedEmoji.current, nextEmoji = focusedEmoji;\n    if (prevEmoji == nextEmoji) { return; }\n    let rowsToUpdate = prevEmoji?.row == nextEmoji?.row ? [prevEmoji?.row] : [prevEmoji?.row, nextEmoji?.row]\n    rowsToUpdate.forEach(row => row && loadMoreItems(row, row));\n    prevFocusedEmoji.current = nextEmoji;\n    nextEmoji?.row && refVirtualList.current?.scrollToItem(nextEmoji.row);\n  }, [focusedEmoji]);\n\n  const loadMoreItems = useCallback(\n    (startIndex: number, endIndex: number) => {\n      const nextArrayOfRows = {}\n      let i = startIndex, range: itemRange | undefined;\n      while (i <= endIndex) {\n\n        range = itemRanges.find(range => range.from <= i && i < range.to);\n        if (range === undefined) break;\n\n        for (let rowIndex = i; rowIndex < Math.min(range.to, endIndex + 1); rowIndex++) {\n          if (rowIndex == range.from) {\n            nextArrayOfRows[rowIndex] = <div className=\"emoji-picker-category-title\" aria-rowindex={rowIndex + 1} aria-colindex={1}>{range.key}</div>\n          } else {\n\n            const offset = rowIndex - range.from;\n            const row = emojiData[range.key].slice((offset - 1) * emojisPerRow, offset * emojisPerRow)\n\n            nextArrayOfRows[rowIndex] = (\n              <ul className=\"emoji-picker-category-emoji\" role=\"row\" aria-rowindex={rowIndex + 1}>\n                { row.map((emoji: EmojiObject, colIndex: number) => {\n                    const liProps = {\n                      key: emoji.unicode, \n                      onClick: handleClickInScroll(emoji, rowIndex), \n                      onMouseMove: handleMouseInScroll(emoji, rowIndex), \n                      role: \"gridcell\", \n                      \"aria-rowindex\": rowIndex + 1,\n                      \"aria-colindex\": colIndex + 1,\n                      tabIndex: -1,\n                      ...emoji === focusedEmoji?.emoji && {\n                        tabIndex: 0,\n                        ref: (li: HTMLLIElement) => focusedEmoji.focusOnRender && li?.focus({preventScroll: focusedEmoji.preventScroll}),\n                      }\n                    }\n                    const emojiProps = {\n                      emoji,\n                      ...emoji === focusedEmoji?.emoji && {\n                        className: \"emoji-picker-emoji-focused\",\n                      }\n                    }\n                    return (\n                      <li {...liProps}>\n                        <Emoji {...emojiProps}/>\n                      </li>\n                    )\n                  }) \n                }\n              </ul>\n            )\n          }\n        }\n        i = range.to;\n      }\n      setArrayOfRows(prev => Object.assign({}, prev, nextArrayOfRows));\n    },\n    [emojisPerRow, focusedEmoji, emojiData, handleClickInScroll, handleMouseInScroll, itemCount, itemRanges],\n  )\n\n  return (\n    <InfiniteLoader \n      ref={infiniteLoaderRef}\n      itemCount={itemCount}\n      loadMoreItems={loadMoreItems}\n      isItemLoaded={index => !!arrayOfRows[index]}\n      minimumBatchSize={numberScrollRows}\n      threshold={10}\n    >\n      {({onItemsRendered, ref}) => (\n        <VirtualList\n          onItemsRendered={onItemsRendered} \n          ref={list => {ref(list); refVirtualList && (refVirtualList.current = list);}}\n          itemCount={itemCount} \n          itemData={arrayOfRows}\n          itemSize={emojiSize} \n          height={collapseHeightOnSearch ? Math.min(itemCount * emojiSize + 9, numberScrollRows * emojiSize) : numberScrollRows * emojiSize}\n          innerElementType={innerElementType}\n        >\n          {MemoizedRow}\n        </VirtualList>\n      )}\n    </InfiniteLoader>\n  )\n}\n\nconst MemoizedScroll = memo(Scroll, function ScrollPropsAreEqual(prevProps, nextProps) {\n  return prevProps.focusedEmoji?.emoji == nextProps.focusedEmoji?.emoji\n      && prevProps.emojiData == nextProps.emojiData\n      && prevProps.collapseHeightOnSearch == nextProps.collapseHeightOnSearch\n      && prevProps.emojiSize == nextProps.emojiSize\n      && prevProps.emojisPerRow == nextProps.emojisPerRow;\n})\n\nexport { MemoizedScroll as Scroll }\n\nconst VirtualRow: FC<{index: number, style: CSSProperties, data}> = ({index, style, data}) => {\n  return (\n    <div className=\"emoji-picker-virtual-row\" style={style}>\n      {data[index]}\n    </div>\n  )\n}\n\n/**\n * memoize rows of the virtualList, only re-rendering when changing in data[index]\n */\nconst MemoizedRow = memo(VirtualRow, function compareRowProps(prevProps, nextProps) {\n  const { style: prevStyle, data: prevData, index: prevIndex, ...prevRest } = prevProps;\n  const { style: nextStyle, data: nextData, index: nextIndex, ...nextRest } = nextProps;\n  return prevData[prevIndex] === nextData[nextIndex] && !shallowDiffer(prevStyle, nextStyle) && !shallowDiffer(prevRest, nextRest)\n});\n\n\n/**\n * adds padding to the bottom of virtual list\n * See: https://github.com/bvaughn/react-window#can-i-add-padding-to-the-top-and-bottom-of-a-list\n */\nconst LIST_PADDING_SIZE = 9;\nconst innerElementType = forwardRef(({style, ...props}: {style: CSSProperties}, ref: Ref<VirtualList>) => (\n  // @ts-ignore\n  <div ref={ref} style={{...style, height: `${parseFloat(style.height) + LIST_PADDING_SIZE}px`, contain: 'strict'}} \n    {...props}\n  />\n));","import React, { forwardRef, useCallback, useState, useImperativeHandle, useMemo, useLayoutEffect, useRef, Ref, useReducer, KeyboardEvent, MouseEvent, useEffect } from \"react\"\nimport { FixedSizeList as VirtualList } from 'react-window';\nimport { EmojiObject, measureScrollbar, calcCountAndRange, itemRange } from './utils'\n\nimport { Navbar } from \"./EmojiPicker/Navbar\";\nimport { Footer } from \"./EmojiPicker/Footer\";\nimport { Scroll } from \"./EmojiPicker/Scroll\";\n\ntype EmojiPickerProps = {\n  emojiData: Record<string, EmojiObject[]>;\n  emojiSize?: number;\n  onEmojiSelect?: (emoji: EmojiObject, event: KeyboardEvent | MouseEvent) => void;\n  showNavbar?: boolean;\n  showFooter?: boolean;\n  showScroll?: boolean;\n  emojisPerRow?: number;\n  numberScrollRows?: number;\n  onKeyDownScroll?: Function;\n  collapseCategoriesOnSearch?: boolean;\n  collapseHeightOnSearch?: boolean;\n  theme?: \"system\" | \"light\" | \"dark\";\n  emojiPreviewName?: (emoji: EmojiObject) => string;\n}\n\n// Define public methods accessible via ref.\n\nexport interface EmojiPickerRef {\n  search: (query: string) => void;\n  emojis: Record<string, EmojiObject[]>;\n  focusedEmoji: EmojiObject | null;\n  handleKeyDownScroll: (event: KeyboardEvent<HTMLElement>) => void;\n}\n\ntype PickerState = {\n  searchEmojis: {emojis: Record<string, EmojiObject[]> | null, query: string},\n  focusedEmoji: {emoji: EmojiObject, row: number, focusOnRender: boolean, preventScroll: boolean} | null\n}\n\n\n// Use state reducer to avoid separate re-renders to changes to searchEmojis and focusedEmoji.\nfunction EmojiPickerReducer({emojiData}) {\n  return (prevState: PickerState, nextState: any): PickerState => {\n    // reset focusedEmoji to first emoji on searchEmojis change\n    if (nextState.searchEmojis && prevState.searchEmojis != nextState.searchEmojis) {\n      let emojis = (nextState.searchEmojis?.query && nextState.searchEmojis?.emojis) || emojiData, \n        category = emojis[Object.keys(emojis)[0]];\n      let emoji = category[0];\n      nextState.focusedEmoji = {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n    }\n    return {...prevState, ...nextState};\n  }\n}\n\nfunction EmojiPickerRefComponent({emojiData = {}, emojiSize = 36, numberScrollRows = 12, onEmojiSelect = (emoji: EmojiObject) => console.log(emoji), showNavbar = false, showFooter = false, showScroll = true, emojisPerRow = 9, onKeyDownScroll = (event) => null, collapseCategoriesOnSearch = true, collapseHeightOnSearch = true, theme = \"system\", emojiPreviewName = (emoji: EmojiObject) => emoji.name}: EmojiPickerProps, ref: Ref<EmojiPickerRef>) {\n\n  const pickerStateReducer = useCallback(EmojiPickerReducer({emojiData}), [emojiData])\n  const [ pickerState, setPickerState ] = useReducer(pickerStateReducer, {\n    searchEmojis: {emojis: null, query: \"\"},\n    focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n  })\n\n  const { itemCount, itemRanges } = useMemo(() => calcCountAndRange(pickerState.searchEmojis.emojis || emojiData, emojisPerRow), [pickerState.searchEmojis, emojisPerRow]);\n\n  /**\n   * TODO: Replace in-memory search with indexeddb index.\n   * See as an example: https://github.com/nolanlawson/emoji-picker-element\n   */\n  const search = (query: string): void => {\n    const {searchEmojis} = pickerState;\n\n    // reset pickerState when query is empty string\n    if (!query)\n      return setPickerState({\n        searchEmojis: {emojis: null, query: \"\"},\n        focusedEmoji: {row: 1, emoji: Object.values(emojiData).flat()[0], focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}\n      });\n\n    // assumption: increasing query length if prevSearchEmojis is empty will not change searchEmojis\n    if (searchEmojis?.emojis && !Object.values(searchEmojis.emojis).flat().length && searchEmojis.query.length < query.length)\n      return setPickerState({searchEmojis: {emojis: searchEmojis.emojis, query}});\n\n    // use prevSearchEmojis if query length has increased, else use full set\n    const index = query.length > searchEmojis.query.length && searchEmojis.emojis != null\n      ? Object.values(searchEmojis.emojis).flat()\n      : Object.values(emojiData).flat();\n\n    // simple weighted search to filter emojiObjects\n    let results = index\n      .map(emoji => ({emoji, score: (emoji.keywords || []).map(word => word.indexOf(query) != -1).reduce((a, b) => a + Number(b), Number(emoji.name.indexOf(query) != -1) * 3)}))\n      .filter(a => a.score)\n      .sort((a, b) => b.score - a.score)\n      .map(({emoji}) => emoji);\n\n    if (collapseCategoriesOnSearch) {\n      return setPickerState({searchEmojis: {emojis: {\"Search Results\": results}, query}});\n    } else {\n      let grouped = Object.entries(emojiData).map(([category, list]) => ([category, list.filter(emoji => results.includes(emoji))])).reduce((sum, [category, list]) => Object.assign(sum, {[category as string]: list}), {});\n      return setPickerState({searchEmojis: {emojis: grouped, query}});\n    }\n  }\n\n  const refVirtualList = useRef<VirtualList>(null);\n  const refScroll = useRef<HTMLDivElement>(null);\n\n  // Define event handlers in scroll element.\n\n  const handleClickInScroll = useCallback(\n    (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n      event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n      onEmojiSelect(emoji, event);\n      setPickerState({focusedEmoji: {row, emoji, focusOnRender: true, preventScroll: true}})\n    }, \n    [onEmojiSelect],\n  )\n  \n  const handleMouseInScroll = useCallback(\n    (emoji: EmojiObject, row: number) => (event: MouseEvent<HTMLElement>) => {\n      if (event.movementX == 0 && event.movementY == 0 || emoji == pickerState.focusedEmoji?.emoji) return;\n      event.preventDefault(); // MDN docs: keep the focus from leaving the HTMLElement\n      // @ts-ignore\n      const isSafari = window.safari !== undefined; // safari does not support preventScroll focus\n      setPickerState({focusedEmoji: {row, emoji, focusOnRender: true, preventScroll: true}})\n      isSafari && refScroll.current && refScroll.current.focus();\n    },\n    [pickerState.focusedEmoji],\n  )\n\n  const handleKeyDownScroll = useCallback(\n    (event: KeyboardEvent<HTMLElement>) => {\n      const {searchEmojis, focusedEmoji} = pickerState;\n      const emojis = Object.values(searchEmojis.emojis || emojiData).filter(array => array.length !== 0);\n      switch (event.key) {\n        case \"Enter\": {\n          event.preventDefault();\n          if (!focusedEmoji) {\n            let emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n            emoji && setPickerState({focusedEmoji: {row: 1, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n          } else {\n            focusedEmoji.emoji && onEmojiSelect(focusedEmoji.emoji, event);\n          }\n          return;\n        }\n        case 'Home': {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          let emojis = searchEmojis.emojis || emojiData, \n            category = emojis[Object.keys(emojis)[0]];\n          emoji = category[0]\n          row = 1;\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        }\n        case 'End': {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          let emojis = searchEmojis.emojis || emojiData, \n            category = emojis[Object.keys(emojis).pop() as string];\n          emoji = category[category.length - 1]\n          row = itemRanges[itemRanges.length - 1]?.to - 1;\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}});\n        }\n        case \"ArrowUp\": {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          if (!focusedEmoji) {\n            emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0];\n            row = 1;\n          } else {\n            let arrayIndex, arrayEmoji, emojiIndex;\n            emojis.find((array, index) => { \n              emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n              return emojiIndex !== -1;\n            })\n            if (emojiIndex != undefined) {\n              if (emojiIndex - emojisPerRow >= 0) { // not first row\n                emoji = arrayEmoji[emojiIndex - emojisPerRow]; \n                row = focusedEmoji.row - 1;\n              } else if (arrayIndex !== 0) {\n                const arrayAbove = emojis[arrayIndex - 1];\n                const index = (emojiIndex > (arrayAbove.length - 1) % emojisPerRow) ? arrayAbove.length - 1 : Math.floor((arrayAbove.length - 1 - emojiIndex) / emojisPerRow) * emojisPerRow + emojiIndex;\n                emoji = arrayAbove[index]; // go directly up if possible; else last element\n                row = focusedEmoji.row - 2; // skip category title row\n              }\n            }\n          }\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        }\n        case \"ArrowDown\": {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          if (!focusedEmoji) {\n            emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n            row = 1;\n          } else {\n            let arrayIndex, arrayEmoji, emojiIndex;\n            emojis.find((array, index) => { \n              emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n              return emojiIndex !== -1;\n            })\n            if (emojiIndex != undefined) {\n              if (emojiIndex + emojisPerRow < arrayEmoji.length) { // not last row\n                emoji = arrayEmoji[emojiIndex + emojisPerRow]; \n                row = focusedEmoji.row + 1;            \n              } else if (emojiIndex + emojisPerRow < Math.ceil(arrayEmoji.length / emojisPerRow) * emojisPerRow) {\n                emoji = arrayEmoji[arrayEmoji.length - 1];\n                row = focusedEmoji.row + 1;\n              } else if (arrayIndex !== emojis.length - 1) {\n                const arrayBelow = emojis[arrayIndex + 1], modIndex = emojiIndex % emojisPerRow;\n                emoji = arrayBelow[modIndex] || arrayBelow[arrayBelow.length - 1] // go directly down if possible\n                row = focusedEmoji.row + 2; // skip category title row\n              }\n            }\n          }\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        }\n        case \"ArrowLeft\": {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          if (!focusedEmoji) {\n            emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n            row = 1;\n          } else {\n            let arrayIndex, arrayEmoji, emojiIndex;\n            emojis.find((array, index) => { \n              emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n              return emojiIndex !== -1;\n            })\n            if (emojiIndex != undefined) {\n              if (emojiIndex - 1 >= 0) { \n                emoji = arrayEmoji[emojiIndex - 1];\n                row = Math.floor(emojiIndex/emojisPerRow) == Math.floor((emojiIndex - 1)/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row - 1;\n              } else if (arrayIndex !== 0) { // category above this one if it exists\n                const arrayAbove = emojis[arrayIndex - 1];\n                emoji = arrayAbove[arrayAbove.length - 1];\n                row = focusedEmoji.row - 2; // skip category title row\n              }\n            }\n          }\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        }\n        case \"ArrowRight\": {\n          event.preventDefault();\n          let emoji: EmojiObject | undefined = undefined, row: number | undefined = undefined;\n          if (!focusedEmoji) {\n            emoji = Object.values(searchEmojis.emojis || emojiData).flat()[0]\n            row = 1;\n          } else {\n            let arrayIndex, arrayEmoji, emojiIndex;\n            emojis.find((array, index) => { \n              emojiIndex = array.findIndex(emoji => emoji === focusedEmoji.emoji), arrayIndex = index, arrayEmoji = array; \n              return emojiIndex !== -1;\n            })\n            if (emojiIndex != undefined) {\n              let newIndex = emojiIndex + 1;\n              if (newIndex < arrayEmoji.length) { \n                emoji = arrayEmoji[newIndex] \n                row = Math.floor(emojiIndex/emojisPerRow) == Math.floor(newIndex/emojisPerRow) ? focusedEmoji.row : focusedEmoji.row + 1;\n              } else if (arrayIndex !== emojis.length - 1) {\n                let arrayBelow = emojis[arrayIndex + 1];\n                emoji = arrayBelow[0];\n                row = focusedEmoji.row + 2; // skip category title row\n              }\n            }\n          }\n          return row && emoji && setPickerState({focusedEmoji: {row, emoji, focusOnRender: Boolean(document.activeElement?.closest(\".emoji-picker-scroll\")), preventScroll: false}})\n        }\n        default:\n          return onKeyDownScroll(event);\n      }\n    },\n    [\n      pickerState.searchEmojis,\n      pickerState.focusedEmoji,\n      emojiData,\n      onEmojiSelect,\n      itemRanges\n    ],\n  )\n\n\n  // Make internal state and methods as publicly accessible via ref.\n  useImperativeHandle(ref, () => ({\n    search, \n    handleKeyDownScroll, \n    emojis: pickerState.searchEmojis.emojis || emojiData, \n    focusedEmoji: pickerState.focusedEmoji?.emoji,\n  }) as EmojiPickerRef)\n\n  const ScrollProps = {\n    emojiData: pickerState.searchEmojis.emojis || emojiData,\n    emojisPerRow: emojisPerRow!,\n    emojiSize,\n    numberScrollRows,\n    focusedEmoji: pickerState.focusedEmoji,\n    refVirtualList,\n    handleClickInScroll,\n    handleMouseInScroll,\n    collapseHeightOnSearch,\n    itemCount, \n    itemRanges,\n  }\n\n  // Define event handler for select in navbar element.\n  const handleSelectInNavbar = useCallback(\n    (category: string) => {\n      let virtualList = refVirtualList.current;\n      if (virtualList) {\n        let range: itemRange | undefined = itemRanges.find(range => range.key === category)\n        if (range) {\n          setPickerState({focusedEmoji: {row: range.from + 1, emoji: emojiData[category][0], focusOnRender: false, preventScroll: false}})\n          virtualList.scrollToItem(range.from, \"start\");\n        }\n      }\n    },\n    [itemRanges],\n  )\n\n  const getWidths = () => {\n    const scrollbarWidth = measureScrollbar()\n    return {\n      scrollbarWidth,\n      width: `calc(${emojiSize}px * ${emojisPerRow} + 1em + ${scrollbarWidth}px)`\n    }\n  }\n\n  // Compute width on window resize.\n  const [width, setWidth] = useState(getWidths);\n  useLayoutEffect(() => {\n    let resizeWidth = () => setWidth(getWidths);\n    window.addEventListener(\"resize\", resizeWidth);\n    return () => window.removeEventListener(\"resize\", resizeWidth);\n  }, [])\n\n  return (\n    <div className={`emoji-picker emoji-picker-${theme}`} style={{width: width.width}}>\n      { showNavbar && \n        <Navbar data={emojiData} handleSelectInNavbar={handleSelectInNavbar} style={{marginRight: width.scrollbarWidth}}/> \n      }\n      <div className=\"emoji-picker-scroll\" role=\"grid\" aria-rowcount={itemCount} aria-colcount={emojisPerRow} onKeyDown={handleKeyDownScroll} ref={refScroll}>\n        { pickerState.searchEmojis.emojis\n          ? Object.values(pickerState.searchEmojis.emojis).flat().length\n            ? <Scroll {...ScrollProps}/>\n            : <div className=\"emoji-picker-category\" style={{height: collapseHeightOnSearch ? 'inherit' : '432px'}}>\n                <div className=\"emoji-picker-category-title\">No results</div>\n              </div>\n          : showScroll && \n              <Scroll {...ScrollProps}/>\n        }\n      </div>\n      { showFooter && \n        <Footer emoji={pickerState.focusedEmoji?.emoji} emojiPreviewName={emojiPreviewName}/> \n      }\n    </div>\n  )\n}\n\nexport const EmojiPicker = forwardRef(EmojiPickerRefComponent);","import React, { useRef, useCallback, useState, ChangeEvent, KeyboardEvent } from 'react';\nimport ReactDOM from 'react-dom';\nimport type { EmojiObject } from '../src/index';\nimport { EmojiPicker, EmojiPickerRef, unifiedToNative, throttleIdleTask } from '../src/index';\nimport EmojiData from \"../data/twemoji.json\"\nimport './index.css';\n\nimport \"../src/EmojiPicker.css\"\nimport \"../src/Emoji.css\"\n\nconst copyToClipboard = async (string: string) => {\n  try {\n    // Try to use the Async Clipboard API with fallback to the legacy approach.\n    // @ts-ignore\n    const {state} = await navigator.permissions.query({name: 'clipboard-write'});\n    if (state !== 'granted') { throw new Error('Clipboard permission not granted'); }\n    await navigator.clipboard.writeText(string);\n  } catch {\n    const textArea = document.createElement('textarea');\n    textArea.value = string;\n    document.body.appendChild(textArea);\n    textArea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textArea);\n  }\n};\n\nfunction ExampleSetup() {\n\n  const picker = useRef<EmojiPickerRef>()\n  const input = useRef<HTMLInputElement>()\n\n  // need reference to same function to throttle\n  const throttledQuery = useCallback(throttleIdleTask((query: string) => picker.current?.search(query)), [picker.current]);\n\n  const inputProps = {\n    ref: input,\n    placeholder: \"search-or-navigate\",\n    onChange: (event: ChangeEvent<HTMLElement>) => throttledQuery((event.target as HTMLInputElement).value.toLowerCase()),\n    onKeyDown: (event: KeyboardEvent<HTMLElement>) => { \n      if (![\"Enter\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Home\", \"End\"].includes(event.key)) return;\n      picker.current.handleKeyDownScroll(event); \n      if (event.key == \"Enter\" && !event.shiftKey) {\n        picker.current.search(\"\");\n        input.current.value = \"\";\n      }\n    },\n  }\n\n  const onEmojiSelect = (emoji: EmojiObject) => {\n    const nativeEmoji = unifiedToNative(emoji.unicode);\n    copyToClipboard(nativeEmoji);\n    notification.show(`Copied ${nativeEmoji} to clipboard`);\n    console.log(emoji);\n  }\n  \n  const emojiPickerProps = { \n    ref: picker, \n    emojiData: EmojiData, \n    onEmojiSelect, \n    showNavbar: true, \n    showFooter: true,\n    collapseHeightOnSearch: false,\n  }\n\n  /**\n   * Adaptation of show-and-hide popup from https://rsms.me/inter/#charset for React hooks.\n   * Ignore this if you're just using this website as an example of how to setup the emoji picker.\n   */\n  const [notification] = useState(() => {\n\n    let timer = null\n    let visible =  false\n\n    const show = (message) => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      (el.firstChild as HTMLElement).innerText = message\n      el.classList.add('visible')\n      if (visible) {\n        hide()\n        setTimeout(() => show(message), 120)\n        return\n      }\n      visible = true\n      el.style.visibility = null\n      clearTimeout(timer)\n      timer = setTimeout(() => hide(), 1200)\n    }\n\n    const hide = () => {\n      const el = document.querySelector('#notification') as HTMLDivElement;\n      if (visible) {\n        el.classList.remove('visible')\n        visible = false\n        el.style.visibility = 'hidden'\n      }\n    }\n  \n    return { show }\n  })\n\n  return (\n    <div style={{'display': 'flex', 'flexDirection': 'column', 'minHeight': '100vh', 'justifyContent': 'center', 'alignItems': 'center'}}>\n      <h1>Emoji Picker</h1>\n      <p>A virtualized <a href=\"https://twemoji.twitter.com/\">twemoji</a> picker written in React and TypeScript.</p>\n      <EmojiPicker {...emojiPickerProps}/>\n      <input {...inputProps}/>\n      <a href=\"https://github.com/BrianHung/EmojiPicker\">source code →</a>\n      <div id=\"notification\">\n        <div></div>\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<ExampleSetup/>, document.getElementById('example-setup'));"],"names":["Emoji","memo","useState","useRef","useCallback","VirtualList","forwardRef","useReducer","useMemo","Scroll","EmojiPicker"],"mappings":"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"}